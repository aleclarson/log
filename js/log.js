// Generated by CoffeeScript 1.11.1
var Logger, Type, clampValue, hook, isNodeJS, isReactNative, isTTY, repeatString, stdout, type;

isReactNative = require("isReactNative");

repeatString = require("repeat-string");

clampValue = require("clampValue");

isNodeJS = require("isNodeJS");

Logger = require("Logger");

Type = require("Type");

hook = require("hook");

stdout = process.stdout;

isTTY = isNodeJS && stdout.isTTY;

type = Type("MainLogger");

type.inherits(Logger);

type.defineValues({
  _offset: 0,
  _print: function() {
    if (isReactNative && global.nativeLoggingHook) {
      return function(message) {
        global.nativeLoggingHook(message, 1);
        return console.log(message);
      };
    }
    if (stdout) {
      return function(message) {
        return stdout.write(message);
      };
    }
    return console.log.bind(console);
  }
});

isNodeJS && type.initInstance(function() {
  this.isColorful = isTTY;
  return isTTY && hook.after(this, "_printChunk", function(_, chunk) {
    if (chunk.message === this.ln) {
      return this._offset = 0;
    } else {
      return this._offset += chunk.length;
    }
  });
});

type.defineGetters({
  offset: function() {
    return this._offset;
  },
  size: isTTY ? function() {
    return stdout.getWindowSize();
  } : function() {
    return null;
  }
});

isTTY && type.defineMethods({
  setOffset: function(offset) {
    var ansi, newValue, oldValue;
    oldValue = this._offset;
    newValue = clampValue(offset, 0, this.size[0]);
    if (newValue !== oldValue) {
      this._offset = newValue;
      this.ansi(ansi = newValue > oldValue ? (newValue - oldValue) + "C" : (oldValue - newValue) + "D");
    }
  },
  setLine: function(line) {
    var ansi, newValue, oldValue;
    oldValue = this._line;
    newValue = clampValue(line, 0, this.lines.length);
    if (newValue !== oldValue) {
      this._line = newValue;
      this.ansi(ansi = newValue > oldValue ? (newValue - oldValue) + "E" : (oldValue - newValue) + "F");
    }
  },
  clearLine: function() {
    var message;
    this.setOffset(0);
    message = repeatString(" ", this.line.length);
    this._printToChunk(message, {
      line: this._line,
      hidden: true
    });
    this.setOffset(0);
  }
});

module.exports = type.construct();
